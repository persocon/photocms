<div class="modal fade" id="imageLibrary" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
	<div class="modal-content">
	  <div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
		<h4 class="modal-title" id="myModalLabel">Image Library</h4>
	  </div>
	  <div class="modal-body">
		<ul class="nav nav-tabs">
		  <li class="active"><a href="#upload" data-toggle="tab">Upload</a></li>
		  <li><a href="#library" data-toggle="tab">Library</a></li>
		  <li><a href="#onThisPost" data-toggle="tab">On this post</a></li>
		</ul>

		<!-- Tab panes -->
		<div class="tab-content">
		  <div class="tab-pane active" id="upload">
			<% form_for :upload, url(:uploads, :create),:remote => true, :class => 'form-horizontal my-dropzone' do |f| %>
			   <div class="dz-message dz-default"></div>
			<% end %>
		  </div>
		  <div class="tab-pane" id="library">
			
		  </div>
		  <div class="tab-pane" id="onThisPost">
				
		  </div>
		</div>
	  </div>
	  <div class="modal-footer">
		<button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
	  </div>
	</div>
  </div>
</div>
<script id="lib-single-template" type="text/x-handlebars-template">
	<figure>
		<img src="{{ thumb.file.url }}" class="img-thumbnail" />
	</figure>
	<p>
	
		<a href="#{{ id }}" class="btn btn-block btn-xs {{#if onThePost}} btn-danger active{{ else }} btn-success {{/if}}">
			{{#if onThePost}}
				<span>Remove</span>
			{{ else }}
				<span>Add</span>
			{{/if}}
		</a>
	</p>
</script>
<script id="single-template" type="text/x-handlebars-template">
	<figure>
		<img src="{{ thumb.file.url }}" class="img-thumbnail" />
	</figure>
	<p>
		<a href="#{{ id }}" class="btn btn-block btn-xs btn-danger active">
			<span>Remove</span>
		</a>
	</p>
	<input type="hidden" name="sort[]" value="{{ id }}" />
</script>
<script id="input-template" type="text/x-handlebars-template">
	<input type="hidden" value="{{ id }}" name="uploads[]" />
</script>
<script>
	window.App = {
	  Models: {},
	  Collections: {},
	  Views: {},
	  Router: {}
	};
	
	window.Template = function(id) {
	  return Handlebars.compile( $('#' + id).html() );
	}

	App.Models.Image = Backbone.Model.extend({
		defaults: {
			"id" : "",
			"filename": "",
			"thumb": "",
			"onThePost": "",
			"featured": ""
		}
	});
	
	App.Collections.Library = Backbone.Collection.extend({
		model: App.Models.Image,
		url: '<%= url(:uploads, :index) %>'
	});
	
	App.Collections.OnThisPost = Backbone.Collection.extend({
		model: App.Models.Image,
		move: function(id, previousId, list) {
			var model = this.get(id), 
				toModel = this.get(previousId), 
			  	index = this.indexOf(toModel) + 1;

		  	this.remove(model, { silent: true });
		  	this.add(model, { at: index, silent: true });

		  	// Persist the change
		  	// this.moveTask({ task: id, previous: previousId });
		  	this.ordenate();
		},
		ordenate: function(){
			var url = "<%= url(:contents, :sortUpload) %>";
			var array = [];
			var authenticity_token = $('input[name="authenticity_token"]').val();
			_.each(this.models, function(e){
				array.push(e.id);
			});
			$.ajax({
				url: url,
				type: 'put',
				data: {sorted: JSON.stringify(array), authenticity_token: authenticity_token}
			})
		}
	});
	App.Collections.InputHidden = Backbone.Collection.extend({
		model: App.Models.Image
	})
	
	App.Views.Single = Backbone.View.extend({
	  tagName: 'li',
	  template: Template('single-template'),
	  initialize: function(){
		this.model.on('remove', this.unrender, this);
	  },
	  render: function(){
		this.$el.html( this.template( this.model.toJSON() ) );
		return this;
	  },
	  unrender: function(){
	  	model = this.model.toJSON();
	  	
	  	LibCollection = Lib.where({id: model.id});
	  	LibCollection[0].set({"onThePost": ""});
	  	
	  	iph = InputHidden.where({id: model.id});
	  	InputHidden.remove(iph[0]);
	  	
		OnThisPost.remove(this.model);
		
		this.$el.remove();
	  },
	  events: {
	  	  'click a.active': 'removeFromPost'
	  },
	  removeFromPost: function(e){
		  e.preventDefault();
		  this.unrender();
	  }
	});

	App.Views.LibrarySingle = Backbone.View.extend({
	  tagName: 'li',
	  template: Template('lib-single-template'),
	  initialize: function(){
		this.model.on('change:onThePost', this.render, this );  
	  },
	  render: function(){
		this.$el.html( this.template( this.model.toJSON() ) );
		return this;
	  },
	  events: {
		  'click a': 'addToPost',
		  'click a.active': 'removeFromPost'
	  },
	  addToPost: function(e){
		  e.preventDefault();
		  
		  this.model.set({"onThePost": true});
		  
		  otp = this.model.clone();
		  iph = this.model.clone();
		  
		  OnThisPost.add(otp);
		  InputHidden.add(iph);
	  },
	  removeFromPost: function(e){
		  e.preventDefault();
		  
		  otp = OnThisPost.where({id: this.model.attributes.id});
		  iph = InputHidden.where({id: this.model.attributes.id});
		  
		  OnThisPost.remove(otp[0]);
		  InputHidden.remove(iph[0]);
		  
		  this.model.set({"onThePost": ""});
	  }
	});
	
	App.Views.InputSingle = Backbone.View.extend({
	  template: Template('input-template'),
	  initialize: function(){
	  	this.model.on('remove', this.unrender, this);
	  },
	  render: function(){
		this.$el.html( this.template( this.model.toJSON() ) );
		return this;
	  },
	  unrender: function(){
		this.remove();
	  }
	});
	
	App.Views.Library = Backbone.View.extend({
	  tagName: 'ul',
	  initialize: function(){
		this.collection.on('add', this.addOne, this);
		this.render();
		
		$('#library').html(this.el);
		
	  },
	  render: function(){
		this.collection.each( this.addOne, this );
		return this;
	  },
	  addOne: function(post){
		var photo = new App.Views.LibrarySingle({ model: post });
		this.$el.append( photo.render().el );
	  }
	});
	
	App.Views.OnThisPost = Backbone.View.extend({
	  tagName: 'ul',
	  className: 'sortable',
	  initialize: function(){
		this.collection.on('add', this.addOne, this);
		this.render();
		
		$('#onThisPost').html(this.el);

		this.makeSortable();
		
	  },
	  render: function(){
		this.collection.each( this.addOne, this );
		return this;
	  },
	  addOne: function(post){
		var photo = new App.Views.Single({ model: post });
		this.$el.append( photo.render().el );
		this.makeSortable();
	  },
	  makeSortable: function(){
	  	var $el = this.$el;
	  	if (this.collection.length) {
	  		$el.sortable('destroy');
	  		$el.sortable().bind('sortupdate', _.bind(this.saveTaskOrder, this));

	  	}
	  },
	  saveTaskOrder: function(e, o) {
	  	var id = $(o.item).find('input[type="hidden"]').val(),
	  		previous = $(o.item).prev(),
	  		previousId = previous.length ? $(previous).find('input[type="hidden"]').val() : null,
	  		request;
	  	this.collection.move(id, previousId, this.model);
	  }
	});
	
	App.Views.Inputs = Backbone.View.extend({
	  initialize: function(){
		this.collection.on('add', this.addOne, this);
		this.render();
		
		$('#uploads_hidden').html(this.el);
		
	  },
	  render: function(){
		this.collection.each( this.addOne, this );
		return this;
	  },
	  addOne: function(post){
		var photo = new App.Views.InputSingle({ model: post });
		this.$el.append( photo.render().el );
	  }
	});
	
	
	<% if @content.id %>
		
		<% all_images = ImageHelper::get_all_images(@content.id) %>
		var Lib = new App.Collections.Library(<%= all_images.html_safe %>);
		new App.Views.Library({ collection: Lib });
		
		<% all_images_on_this_post = ImageHelper::get_all_images_on_this_post(@content.id) %>
		var OnThisPost = new App.Collections.OnThisPost(<%= all_images_on_this_post.html_safe %>);
		new App.Views.OnThisPost({ collection: OnThisPost });
		
		<% all_images_on_this_post_hidden = ImageHelper::get_all_images_on_this_post(@content.id) %>
		var InputHidden = new App.Collections.InputHidden(<%= all_images_on_this_post_hidden.html_safe %>);
		new App.Views.Inputs({ collection: InputHidden });

	<% else %>
		
		<% all_images = ImageHelper::get_all_images() %>
		var Lib = new App.Collections.Library(<%= all_images.html_safe %>);
		new App.Views.Library({ collection: Lib });

		window.OnThisPost = new App.Collections.OnThisPost();
		new App.Views.OnThisPost({ collection: window.OnThisPost });

		var InputHidden = new App.Collections.InputHidden();
		new App.Views.Inputs({ collection: InputHidden });
		
	<% end %>
</script>
<script>
// DROPZONE CONFIG
var myDropzone = new Dropzone(".my-dropzone");
myDropzone.on("complete", function(file) {
	var item = $.parseJSON(file.xhr.response);
	var itemModel = new App.Models.Image(item);
	OnThisPost.add(itemModel);
	InputHidden.add(itemModel);
	Lib.add(itemModel);
});

</script>